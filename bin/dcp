#!/usr/bin/env ruby
require 'thor'
require File.join(File.dirname(__FILE__), 'output_helper')
require File.join(File.dirname(__FILE__), '../lib/dcp')

class App < Thor
  namespace 'dcp'

  desc 'identify', 'Identify Profinet devices'
  method_option :interface, aliases: '-i', type: 'string',  default: Dcp::DEFAULT_INTERFACE,      desc: 'Network interface'
  method_option :timeout,   aliases: '-t', type: 'numeric', default: Dcp::COMMUNICATION_TIMEOUT,  desc: 'Timeout'
  def identify()
    puts "Scanning interface #{arg(options[:interface])}..."
    responeses = Dcp.new(options[:interface], options[:timeout]).identify_all

    puts "\n   #{arg('MAC address')}    | #{arg('IP address')} | #{arg('subnet mask')} | #{arg('device name (type)')}"
    responeses.each do |device_mac, response|
      ip_block = response.block(:ip, :ip)
      puts "#{device_mac} | #{ip_block.ip_address} | #{ip_block.subnet_mask} | #{response.block(:device, :name).name_of_station} (#{response.block(:device, :vendor).type_of_station})"
    end
  end

  desc 'set_ip DEVICE_MAC IP_ADDRESS [SUBNET_MASK] [GATEWAY]', 'Sets device ip settings'
  method_option :interface, aliases: '-i', type: 'string',  default: Dcp::DEFAULT_INTERFACE,      desc: 'Network interface'
  method_option :timeout,   aliases: '-t', type: 'numeric', default: Dcp::COMMUNICATION_TIMEOUT,  desc: 'Timeout'
  def set_ip(device_mac, ip_address, subnet_mask = '255.255.255.0', gateway = '0.0.0.0')
    puts "Setting ip address to #{arg(ip_address)} for device #{arg(device_mac)}..."
    puts Dcp.new(options[:interface], options[:timeout]).set_ip(device_mac, ip_address, subnet_mask, gateway) == 'ok' ? done : failed
  end

  desc 'set_name DEVICE_MAC DEVICE_NAME', 'Sets device name'
  method_option :interface, aliases: '-i', type: 'string',  default: Dcp::DEFAULT_INTERFACE,      desc: 'Network interface'
  method_option :timeout,   aliases: '-t', type: 'numeric', default: Dcp::COMMUNICATION_TIMEOUT,  desc: 'Timeout'
  def set_name(device_mac, device_name)
    puts "Setting device name to #{arg(device_name)} for device #{arg(device_mac)}..."
    puts Dcp.new(options[:interface], options[:timeout]).set_name(device_mac, device_name) == 'ok' ? done : failed
  end

  desc 'signal DEVICE_MAC', 'Physically detect device'
  method_option :interface, aliases: '-i', type: 'string',  default: Dcp::DEFAULT_INTERFACE,      desc: 'Network interface'
  method_option :timeout,   aliases: '-t', type: 'numeric', default: Dcp::COMMUNICATION_TIMEOUT,  desc: 'Timeout'
  def signal(device_mac)
    puts "Detecting device #{arg(device_mac)}..."
    puts Dcp.new(options[:interface], options[:timeout]).signal(device_mac) == 'ok' ? done : failed
  end

  desc 'factory_reset DEVICE_MAC', 'Reset device to factory settings'
  method_option :interface, aliases: '-i', type: 'string',  default: Dcp::DEFAULT_INTERFACE,      desc: 'Network interface'
  method_option :timeout,   aliases: '-t', type: 'numeric', default: Dcp::COMMUNICATION_TIMEOUT,  desc: 'Timeout'
  def factory_reset(device_mac)
    puts "Reset device #{arg(device_mac)} to factory settings..."
    puts Dcp.new(options[:interface], options[:timeout]).factory_reset(device_mac) == 'ok' ? done : failed
  end

end

App.start
